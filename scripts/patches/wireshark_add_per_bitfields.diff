diff --git a/wireshark-3.2.1/epan/dissectors/packet-lte-rrc.c b/wireshark-3.2.1/epan/dissectors/packet-lte-rrc.c
index 98c7b30..26dcd44 100644
--- a/wireshark-3.2.1/epan/dissectors/packet-lte-rrc.c
+++ b/wireshark-3.2.1/epan/dissectors/packet-lte-rrc.c
@@ -19991,7 +19991,6 @@ static int
 dissect_lte_rrc_INTEGER_1_2(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,
                                                             1U, 2U, NULL, FALSE);
-
   return offset;
 }
 
@@ -113160,11 +113159,11 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "BCCH_BCH_MessageType", HFILL }},
     { &hf_lte_rrc_message_01,
-      { "message", "lte-rrc.message_element",
+      { "message_01", "lte-rrc.message_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "BCCH_BCH_MessageType_MBMS_r14", HFILL }},
     { &hf_lte_rrc_message_02,
-      { "message", "lte-rrc.message",
+      { "message_02", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_BCCH_DL_SCH_MessageType_vals), 0,
         "BCCH_DL_SCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_07,
@@ -113184,7 +113183,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_lte_rrc_message_03,
-      { "message", "lte-rrc.message",
+      { "message_03", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_BCCH_DL_SCH_MessageType_BR_r13_vals), 0,
         "BCCH_DL_SCH_MessageType_BR_r13", HFILL }},
     { &hf_lte_rrc_c1_08,
@@ -113204,7 +113203,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "T_messageClassExtension_01", HFILL }},
     { &hf_lte_rrc_message_04,
-      { "message", "lte-rrc.message",
+      { "message_04", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_BCCH_DL_SCH_MessageType_MBMS_r14_vals), 0,
         "BCCH_DL_SCH_MessageType_MBMS_r14", HFILL }},
     { &hf_lte_rrc_c1_09,
@@ -113224,7 +113223,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "T_messageClassExtension_02", HFILL }},
     { &hf_lte_rrc_message_05,
-      { "message", "lte-rrc.message",
+      { "message_05", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_MCCH_MessageType_vals), 0,
         "MCCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_10,
@@ -113252,7 +113251,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "T_messageClassExtension_03", HFILL }},
     { &hf_lte_rrc_message_06,
-      { "message", "lte-rrc.message",
+      { "message_06", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_PCCH_MessageType_vals), 0,
         "PCCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_11,
@@ -113268,7 +113267,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "T_messageClassExtension_04", HFILL }},
     { &hf_lte_rrc_message_07,
-      { "message", "lte-rrc.message",
+      { "message_07", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_DL_CCCH_MessageType_vals), 0,
         "DL_CCCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_12,
@@ -113308,7 +113307,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_lte_rrc_message_08,
-      { "message", "lte-rrc.message",
+      { "message_08", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_DL_DCCH_MessageType_vals), 0,
         "DL_DCCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_13,
@@ -113372,7 +113371,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "T_messageClassExtension_06", HFILL }},
     { &hf_lte_rrc_message_09,
-      { "message", "lte-rrc.message",
+      { "message_09", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_UL_CCCH_MessageType_vals), 0,
         "UL_CCCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_14,
@@ -113416,7 +113415,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         "T_messageClassExtensionFuture_r15_01", HFILL }},
     { &hf_lte_rrc_message_10,
-      { "message", "lte-rrc.message",
+      { "message_10", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_UL_DCCH_MessageType_vals), 0,
         "UL_DCCH_MessageType", HFILL }},
     { &hf_lte_rrc_c1_15,
@@ -113544,7 +113543,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_lte_rrc_message_11,
-      { "message", "lte-rrc.message",
+      { "message_11", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_SC_MCCH_MessageType_r13_vals), 0,
         "SC_MCCH_MessageType_r13", HFILL }},
     { &hf_lte_rrc_c1_16,
@@ -120232,7 +120231,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_systemTimeInfo_r11_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_01,
-      { "explicitValue", "lte-rrc.explicitValue_element",
+      { "explicitValue-01", "lte-rrc.explicitValue_01_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "SystemTimeInfoCDMA2000", HFILL }},
     { &hf_lte_rrc_searchWindowSize_r11,
@@ -123928,7 +123927,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_antennaInfo_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_02,
-      { "explicitValue", "lte-rrc.explicitValue_element",
+      { "explicitValue-02", "lte-rrc.explicitValue_02_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "AntennaInfoDedicated", HFILL }},
     { &hf_lte_rrc_schedulingRequestConfig,
@@ -126348,7 +126347,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_mac_MainConfig_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_03,
-      { "explicitValue", "lte-rrc.explicitValue_element",
+      { "explicitValue-03", "lte-rrc.explicitValue_03_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "MAC_MainConfig", HFILL }},
     { &hf_lte_rrc_sps_Config,
@@ -126528,7 +126527,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_rlc_Config_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_04,
-      { "explicitValue", "lte-rrc.explicitValue",
+      { "explicitValue-04", "lte-rrc.explicitValue_04_element",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_RLC_Config_vals), 0,
         "RLC_Config", HFILL }},
     { &hf_lte_rrc_logicalChannelConfig,
@@ -126536,7 +126535,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_logicalChannelConfig_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_05,
-      { "explicitValue", "lte-rrc.explicitValue_element",
+      { "explicitValue-05", "lte-rrc.explicitValue_05_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "LogicalChannelConfig", HFILL }},
     { &hf_lte_rrc_pdcp_verChange_r15,
@@ -135708,7 +135707,7 @@ void proto_register_lte_rrc(void) {
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_06,
-      { "explicitValue", "lte-rrc.explicitValue",
+      { "explicitValue-06", "lte-rrc.explicitValue_06_element",
         FT_UINT32, BASE_CUSTOM, CF_FUNC(lte_rrc_mbms_MaxBW_r14_fmt), 0,
         "INTEGER_2_20", HFILL }},
     { &hf_lte_rrc_mbms_ScalingFactor1dot25_r14,
@@ -138108,11 +138107,11 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, NULL, 0,
         "INTEGER_1_4", HFILL }},
     { &hf_lte_rrc_message_12,
-      { "message", "lte-rrc.message_element",
+      { "message_12", "lte-rrc.message_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "SBCCH_SL_BCH_MessageType", HFILL }},
     { &hf_lte_rrc_message_13,
-      { "message", "lte-rrc.message_element",
+      { "message_13", "lte-rrc.message_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "SBCCH_SL_BCH_MessageType_V2X_r14", HFILL }},
     { &hf_lte_rrc_sl_Bandwidth_r12,
@@ -138336,15 +138335,15 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC|BASE_EXT_STRING, &lte_rrc_T_ue_InactiveTime_01_vals_ext, 0,
         "T_ue_InactiveTime_01", HFILL }},
     { &hf_lte_rrc_message_14,
-      { "message", "lte-rrc.message_element",
+      { "message_14", "lte-rrc.message_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "BCCH_BCH_MessageType_NB", HFILL }},
     { &hf_lte_rrc_message_15,
-      { "message", "lte-rrc.message_element",
+      { "message_15", "lte-rrc.message_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "BCCH_BCH_MessageType_TDD_NB_r15", HFILL }},
     { &hf_lte_rrc_message_16,
-      { "message", "lte-rrc.message",
+      { "message_16", "lte-rrc.message",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_BCCH_DL_SCH_MessageType_NB_vals), 0,
         "BCCH_DL_SCH_MessageType_NB", HFILL }},
     { &hf_lte_rrc_c1_54,
@@ -140824,7 +140823,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_rlc_Config_r13_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_07,
-      { "explicitValue", "lte-rrc.explicitValue",
+      { "explicitValue-07", "lte-rrc.explicitValue_07_element",
         FT_UINT32, BASE_DEC, VALS(lte_rrc_RLC_Config_NB_r13_vals), 0,
         "RLC_Config_NB_r13", HFILL }},
     { &hf_lte_rrc_logicalChannelConfig_r13,
@@ -140832,7 +140831,7 @@ void proto_register_lte_rrc(void) {
         FT_UINT32, BASE_DEC, VALS(lte_rrc_T_logicalChannelConfig_r13_vals), 0,
         NULL, HFILL }},
     { &hf_lte_rrc_explicitValue_08,
-      { "explicitValue", "lte-rrc.explicitValue_element",
+      { "explicitValue-08", "lte-rrc.explicitValue_08_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "LogicalChannelConfig_NB_r13", HFILL }},
     { &hf_lte_rrc_rlc_Config_v1430_01,
diff --git a/wireshark-3.2.1/epan/dissectors/packet-per.c b/wireshark-3.2.1/epan/dissectors/packet-per.c
index 5db75b3..4b51b7d 100644
--- a/wireshark-3.2.1/epan/dissectors/packet-per.c
+++ b/wireshark-3.2.1/epan/dissectors/packet-per.c
@@ -122,6 +122,27 @@ static const true_false_string tfs_optional_field_bit = {
 
 #define SEQ_MAX_COMPONENTS 128
 
+static inline void update_per_fi_flags(field_info * fi, int start_offset, int offset){
+	int bits_offset;
+	int bytes_len;
+	// Ignore already processed fields
+	if (FI_GET_BITS_SIZE(fi))
+		return;
+	
+	bits_offset = start_offset % 8; // Align to byte boundary
+	bytes_len = BLEN(start_offset, offset);
+
+	// Add missing length for protocol fields (FT_NONE) or developer mistakes
+	// It's not possible to have a difference in offset and still have a byte length = 0
+	if(!fi->length && bytes_len) fi->length=bytes_len;
+	// Add one more byte
+	if(bits_offset + (offset-start_offset) > (bytes_len << 3))
+		fi->length=bytes_len+1;
+
+	FI_SET_FLAG(fi,FI_BITS_OFFSET(bits_offset));
+	FI_SET_FLAG(fi,FI_BITS_SIZE(offset-start_offset));
+}
+
 static void per_check_value(guint32 value, guint32 min_len, guint32 max_len, asn1_ctx_t *actx, proto_item *item, gboolean is_signed)
 {
 	if ((is_signed == FALSE) && (value > max_len)) {
@@ -1104,6 +1125,9 @@ DEBUG_ENTRY("dissect_per_boolean");
 	if(bool_val){
 		*bool_val=value;
 	}
+	if(actx->created_item){
+		update_per_fi_flags(actx->created_item->finfo, offset, offset+1); // Advance single bit
+	}
 	return offset+1;
 }
 
@@ -1118,6 +1142,7 @@ dissect_per_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree
 	guint32 val;
 	proto_item *it=NULL;
 	header_field_info *hfi;
+	guint32 start_offset;
 
 	/* 12.2.6 b */
 	offset=dissect_per_length_determinant(tvb, offset, actx, tree,hf_per_integer_length, &length, NULL);
@@ -1127,6 +1152,7 @@ dissect_per_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree
 		length=4;
 	}
 
+	start_offset = offset;
 	val=0;
 	for(i=0;i<length;i++){
 		if(i==0){
@@ -1160,6 +1186,9 @@ dissect_per_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree
 	if(value){
 		*value=val;
 	}
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+	}
 
 	return offset;
 }
@@ -1171,6 +1200,7 @@ dissect_per_integer64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	guint64 val;
 	proto_item *it=NULL;
 	header_field_info *hfi;
+	guint32 start_offset;
 
 	/* 12.2.6 b */
 	offset=dissect_per_length_determinant(tvb, offset, actx, tree, -1, &length, NULL);
@@ -1180,6 +1210,7 @@ dissect_per_integer64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 		length=8;
 	}
 
+	start_offset = offset;
 	val=0;
 	for(i=0;i<length;i++){
 		if(i==0){
@@ -1215,6 +1246,8 @@ dissect_per_integer64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 		*value=(gint64)val;
 	}
 
+	if(it)
+		update_per_fi_flags(it->finfo, start_offset, offset);
 	return offset;
 }
 /* this function reads a constrained integer  with or without a
@@ -1247,6 +1280,7 @@ dissect_per_constrained_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx,
 	nstime_t timeval;
 	header_field_info *hfi;
 	int num_bits;
+	guint32 start_offset;
 
 DEBUG_ENTRY("dissect_per_constrained_integer");
 	if(has_extension){
@@ -1259,6 +1293,7 @@ DEBUG_ENTRY("dissect_per_constrained_integer");
 		}
 	}
 
+	start_offset = offset;
 	hfi = proto_registrar_get_nth(hf_index);
 
 	/* 10.5.3 Let "range" be defined as the integer value ("ub" - "lb"   1), and let the value to be encoded be "n".
@@ -1399,6 +1434,11 @@ DEBUG_ENTRY("dissect_per_constrained_integer");
 	}
 	actx->created_item = it;
 	if (value) *value = val;
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+		it->finfo->value_min=min;
+		it->finfo->value_max=max;
+	}
 	return offset;
 }
 
@@ -1412,6 +1452,7 @@ dissect_per_constrained_integer_64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *a
 	header_field_info *hfi;
 	int num_bits;
 	gboolean tmp;
+	guint32 start_offset;
 
 DEBUG_ENTRY("dissect_per_constrained_integer_64b");
 	if(has_extension){
@@ -1424,6 +1465,7 @@ DEBUG_ENTRY("dissect_per_constrained_integer_64b");
 		}
 	}
 
+	start_offset = offset;
 	hfi = proto_registrar_get_nth(hf_index);
 
 	/* 10.5.3 Let "range" be defined as the integer value ("ub" - "lb"   1), and let the value to be encoded be "n".
@@ -1601,6 +1643,11 @@ DEBUG_ENTRY("dissect_per_constrained_integer_64b");
 	}
 	actx->created_item = it;
 	if (value) *value = val;
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+		it->finfo->value_min=min;
+		it->finfo->value_max=max;
+	}
 	return offset;
 }
 
@@ -1612,6 +1659,7 @@ dissect_per_enumerated(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	proto_item *it=NULL;
 	guint32 enum_index, val;
 	guint32 start_offset = offset;
+	guint32 value_index;
 	gboolean extension_present = FALSE;
 	header_field_info *hfi;
 
@@ -1621,6 +1669,7 @@ dissect_per_enumerated(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 		if (!display_internal_per_fields) proto_item_set_hidden(actx->created_item);
 	}
 
+	value_index = offset;
 	if (!extension_present) {
 		/* 13.2  */
 		offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_per_enum_index, 0, root_num - 1, &enum_index, FALSE);
@@ -1642,6 +1691,9 @@ dissect_per_enumerated(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	}
 	actx->created_item = it;
 	if (value) *value = val;
+	if(it){
+		update_per_fi_flags(it->finfo, value_index, offset);
+	}
 	return offset;
 }
 
@@ -1667,6 +1719,8 @@ dissect_per_real(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree *tr
 
 	if (value) *value = val;
 
+	if(actx->created_item)
+		update_per_fi_flags(actx->created_item->finfo,offset,end_offset);
 	return end_offset;
 }
 
@@ -1681,6 +1735,7 @@ dissect_per_choice(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree *
 	int i, idx, cidx;
 	guint32 ext_length = 0;
 	guint32 old_offset = offset;
+	guint32 start_offset;
 	proto_item *choice_item = NULL;
 	proto_tree *choice_tree = NULL;
 
@@ -1712,6 +1767,7 @@ DEBUG_ENTRY("dissect_per_choice");
 				break;
 		}
 	}
+	start_offset = offset;
 
 	if (!extension_flag) {  /* 22.6, 22.7 */
 		if (extension_root_entries == 1) {  /* 22.5 */
@@ -1746,6 +1802,8 @@ DEBUG_ENTRY("dissect_per_choice");
 	if (idx != -1) {
 		choice_item = proto_tree_add_uint(tree, hf_index, tvb, old_offset>>3, 0, choice[idx].value);
 		choice_tree = proto_item_add_subtree(choice_item, ett_index);
+		if(choice_item)
+			update_per_fi_flags(choice_item->finfo, start_offset, offset);
 		if (!extension_flag) {
 			offset = choice[idx].func(tvb, offset, actx, choice_tree, *choice[idx].p_id);
 		} else {
@@ -2016,6 +2074,8 @@ DEBUG_ENTRY("dissect_per_sequence");
 
 	proto_item_set_len(item, (offset>>3)!=(old_offset>>3)?(offset>>3)-(old_offset>>3):1);
 	actx->created_item = item;
+	if(item)
+		update_per_fi_flags(item->finfo,old_offset,offset);
 	return offset;
 }
 
@@ -2158,6 +2218,8 @@ static tvbuff_t *dissect_per_bit_string_display(tvbuff_t *tvb, guint32 offset, a
 			}
 		}
 		proto_item_append_text(actx->created_item, "]");
+		if(actx->created_item)
+			update_per_fi_flags(actx->created_item->finfo, offset, offset + length);
 	}
 
 	return out_tvb;
diff --git a/wireshark-3.2.1/epan/proto.c b/wireshark-3.2.1/epan/proto.c
index 1c924cb..1827459 100644
--- a/wireshark-3.2.1/epan/proto.c
+++ b/wireshark-3.2.1/epan/proto.c
@@ -6003,6 +6003,9 @@ new_field_info(proto_tree *tree, header_field_info *hfinfo, tvbuff_t *tvb,
 	fi->length     = item_length;
 	fi->tree_type  = -1;
 	fi->flags      = 0;
+	fi->value_min  = 0;
+	fi->value_max  = 0;
+	
 	if (!PTREE_DATA(tree)->visible)
 		FI_SET_FLAG(fi, FI_HIDDEN);
 	fvalue_init(&fi->value, fi->hfinfo->type);
diff --git a/wireshark-3.2.1/epan/proto.h b/wireshark-3.2.1/epan/proto.h
index 5b2a8e2..6819742 100644
--- a/wireshark-3.2.1/epan/proto.h
+++ b/wireshark-3.2.1/epan/proto.h
@@ -721,6 +721,10 @@ typedef struct field_info {
     tvbuff_t            *ds_tvb;          /**< data source tvbuff */
     fvalue_t             value;
     proto_node          *source_tree;     /**< add tree which this field belong (why this was not added before?) */
+    guint64 value_min;
+    guint64 value_max;
+    // guint32 bits_offset;
+    // guint32 bits_length;
 } field_info;
 
 
