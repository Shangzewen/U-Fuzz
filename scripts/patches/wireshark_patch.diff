diff --git a/wireshark-3.2.1/CMakeLists.txt b/wireshark-3.2.1/CMakeLists.txt
index ca63482..cec9cca 100644
--- a/wireshark-3.2.1/CMakeLists.txt
+++ b/wireshark-3.2.1/CMakeLists.txt
@@ -1445,6 +1445,7 @@ if(ENABLE_PLUGINS)
 	set(PLUGIN_SRC_DIRS
 		plugins/epan/ethercat
 		plugins/epan/gryphon
+        plugins/epan/h4bcm
 		plugins/epan/irda
 		plugins/epan/mate
 		plugins/epan/opcua
@@ -3173,6 +3174,8 @@ set(SHARK_PUBLIC_HEADERS
 	ws_diag_control.h
 	ws_symbol_export.h
 	version_info.h
+    ${PROJECT_BINARY_DIR}/config.h
+    ${PROJECT_BINARY_DIR}/version.h
 	${PROJECT_BINARY_DIR}/ws_version.h
 )
 
diff --git a/wireshark-3.2.1/epan/CMakeLists.txt b/wireshark-3.2.1/epan/CMakeLists.txt
index ec91172..795c1bb 100644
--- a/wireshark-3.2.1/epan/CMakeLists.txt
+++ b/wireshark-3.2.1/epan/CMakeLists.txt
@@ -374,6 +374,9 @@ target_include_directories(epan SYSTEM PUBLIC ${GLIB2_INCLUDE_DIRS})
 
 add_dependencies(epan lemon)
 
+export(TARGETS epan NAMESPACE wireshark::
+FILE ${PROJECT_BINARY_DIR}/wireshark-targets.cmake)
+
 install(TARGETS epan
 	EXPORT WiresharkTargets
 	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
diff --git a/wireshark-3.2.1/epan/dissectors/packet-per.c b/wireshark-3.2.1/epan/dissectors/packet-per.c
index 8276dc9..093f70c 100644
--- a/wireshark-3.2.1/epan/dissectors/packet-per.c
+++ b/wireshark-3.2.1/epan/dissectors/packet-per.c
@@ -114,6 +114,27 @@ static const true_false_string tfs_small_number_bit = {
 
 #define SEQ_MAX_COMPONENTS 128
 
+static inline void update_per_fi_flags(field_info * fi, int start_offset, int offset){
+	int bits_offset;
+	int bytes_len;
+	// Ignore already processed fields
+	if (FI_GET_BITS_SIZE(fi))
+		return;
+	
+	bits_offset = start_offset % 8; // Align to byte boundary
+	bytes_len = BLEN(start_offset, offset);
+
+	// Add missing length for protocol fields (FT_NONE) or developer mistakes
+	// It's not possible to have a difference in offset and still have a byte length = 0
+	if(!fi->length && bytes_len) fi->length=bytes_len;
+	// Add one more byte
+	if(bits_offset + (offset-start_offset) > (bytes_len << 3))
+		fi->length=bytes_len+1;
+
+	FI_SET_FLAG(fi,FI_BITS_OFFSET(bits_offset));
+	FI_SET_FLAG(fi,FI_BITS_SIZE(offset-start_offset));
+}
+
 static void per_check_value(guint32 value, guint32 min_len, guint32 max_len, asn1_ctx_t *actx, proto_item *item, gboolean is_signed)
 {
 	if ((is_signed == FALSE) && (value > max_len)) {
@@ -1096,6 +1117,9 @@ DEBUG_ENTRY("dissect_per_boolean");
 	if(bool_val){
 		*bool_val=value;
 	}
+	if(actx->created_item){
+		update_per_fi_flags(actx->created_item->finfo, offset, offset+1); // Advance single bit
+	}
 	return offset+1;
 }
 
@@ -1111,6 +1135,7 @@ dissect_per_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree
 	tvbuff_t *val_tvb=NULL;
 	proto_item *it=NULL;
 	header_field_info *hfi;
+	guint32 start_offset;
 
 	/* 12.2.6 b */
 	offset=dissect_per_length_determinant(tvb, offset, actx, tree,hf_per_integer_length, &length, NULL);
@@ -1123,6 +1148,7 @@ dissect_per_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree
 	if (actx->aligned) BYTE_ALIGN_OFFSET(offset);
 	val_tvb = tvb_new_octet_aligned(tvb, offset, length * 8);
 	val=0;
+	start_offset = offset;
 	for(i=0;i<length;i++){
 		if(i==0){
 			if(tvb_get_guint8(val_tvb, i)&0x80){
@@ -1156,6 +1182,9 @@ dissect_per_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree
 	if(value){
 		*value=val;
 	}
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+	}
 
 	return offset;
 }
@@ -1167,6 +1196,7 @@ dissect_per_integer64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	guint64 val;
 	proto_item *it=NULL;
 	header_field_info *hfi;
+	guint32 start_offset;
 
 	/* 12.2.6 b */
 	offset=dissect_per_length_determinant(tvb, offset, actx, tree, -1, &length, NULL);
@@ -1176,6 +1206,7 @@ dissect_per_integer64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 		length=8;
 	}
 
+	start_offset = offset;
 	val=0;
 	for(i=0;i<length;i++){
 		if(i==0){
@@ -1210,6 +1241,9 @@ dissect_per_integer64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	if(value){
 		*value=(gint64)val;
 	}
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+	}
 
 	return offset;
 }
@@ -1243,6 +1277,7 @@ dissect_per_constrained_integer(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx,
 	nstime_t timeval;
 	header_field_info *hfi;
 	int num_bits;
+	guint32 start_offset;
 
 DEBUG_ENTRY("dissect_per_constrained_integer");
 	if(has_extension){
@@ -1255,6 +1290,7 @@ DEBUG_ENTRY("dissect_per_constrained_integer");
 		}
 	}
 
+	start_offset = offset;
 	hfi = proto_registrar_get_nth(hf_index);
 
 	/* 10.5.3 Let "range" be defined as the integer value ("ub" - "lb"   1), and let the value to be encoded be "n".
@@ -1395,6 +1431,11 @@ DEBUG_ENTRY("dissect_per_constrained_integer");
 	}
 	actx->created_item = it;
 	if (value) *value = val;
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+		it->finfo->value_min=min;
+		it->finfo->value_max=max;
+	}
 	return offset;
 }
 
@@ -1408,6 +1449,7 @@ dissect_per_constrained_integer_64b(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *a
 	header_field_info *hfi;
 	int num_bits;
 	gboolean tmp;
+	guint32 start_offset;
 
 DEBUG_ENTRY("dissect_per_constrained_integer_64b");
 	if(has_extension){
@@ -1420,6 +1462,7 @@ DEBUG_ENTRY("dissect_per_constrained_integer_64b");
 		}
 	}
 
+	start_offset = offset;
 	hfi = proto_registrar_get_nth(hf_index);
 
 	/* 10.5.3 Let "range" be defined as the integer value ("ub" - "lb"   1), and let the value to be encoded be "n".
@@ -1597,6 +1640,11 @@ DEBUG_ENTRY("dissect_per_constrained_integer_64b");
 	}
 	actx->created_item = it;
 	if (value) *value = val;
+	if(it){
+		update_per_fi_flags(it->finfo, start_offset, offset);
+		it->finfo->value_min=min;
+		it->finfo->value_max=max;
+	}
 	return offset;
 }
 
@@ -1610,6 +1658,7 @@ dissect_per_enumerated(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	guint32 start_offset = offset;
 	gboolean extension_present = FALSE;
 	header_field_info *hfi;
+	guint32 value_index;
 
 	if (has_extension) {
 		/* Extension bit */
@@ -1617,6 +1666,7 @@ dissect_per_enumerated(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 		if (!display_internal_per_fields) proto_item_set_hidden(actx->created_item);
 	}
 
+	value_index = offset;
 	if (!extension_present) {
 		/* 13.2  */
 		offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_per_enum_index, 0, root_num - 1, &enum_index, FALSE);
@@ -1638,6 +1688,9 @@ dissect_per_enumerated(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tr
 	}
 	actx->created_item = it;
 	if (value) *value = val;
+	if(it){
+		update_per_fi_flags(it->finfo, value_index, offset);
+	}
 	return offset;
 }
 
@@ -1663,6 +1716,9 @@ dissect_per_real(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree *tr
 
 	if (value) *value = val;
 
+	if(actx->created_item){
+		update_per_fi_flags(actx->created_item->finfo,offset,end_offset);
+	}
 	return end_offset;
 }
 
@@ -1679,6 +1735,7 @@ dissect_per_choice(tvbuff_t *tvb, guint32 offset, asn1_ctx_t *actx, proto_tree *
 	guint32 old_offset = offset;
 	proto_item *choice_item = NULL;
 	proto_tree *choice_tree = NULL;
+	guint32 start_offset;
 
 DEBUG_ENTRY("dissect_per_choice");
 
@@ -1709,6 +1766,7 @@ DEBUG_ENTRY("dissect_per_choice");
 		}
 	}
 
+	start_offset = offset;
 	if (!extension_flag) {  /* 22.6, 22.7 */
 		if (extension_root_entries == 1) {  /* 22.5 */
 			choice_index = 0;
@@ -1742,6 +1800,9 @@ DEBUG_ENTRY("dissect_per_choice");
 	if (idx != -1) {
 		choice_item = proto_tree_add_uint(tree, hf_index, tvb, old_offset>>3, 0, choice[idx].value);
 		choice_tree = proto_item_add_subtree(choice_item, ett_index);
+		if(choice_item){
+			update_per_fi_flags(choice_item->finfo, start_offset, offset);
+		}
 		if (!extension_flag) {
 			offset = choice[idx].func(tvb, offset, actx, choice_tree, *choice[idx].p_id);
 		} else {
@@ -2012,6 +2073,9 @@ DEBUG_ENTRY("dissect_per_sequence");
 
 	proto_item_set_len(item, (offset>>3)!=(old_offset>>3)?(offset>>3)-(old_offset>>3):1);
 	actx->created_item = item;
+	if(item){
+		update_per_fi_flags(item->finfo,old_offset,offset);
+	}
 	return offset;
 }
 
@@ -2154,6 +2218,9 @@ static tvbuff_t *dissect_per_bit_string_display(tvbuff_t *tvb, guint32 offset, a
 			}
 		}
 		proto_item_append_text(actx->created_item, "]");
+		if(actx->created_item){
+			update_per_fi_flags(actx->created_item->finfo, offset, offset + length);
+		}
 	}
 
 	return out_tvb;
diff --git a/wireshark-3.2.1/epan/proto.c b/wireshark-3.2.1/epan/proto.c
index 065b4b2..8c36e55 100644
--- a/wireshark-3.2.1/epan/proto.c
+++ b/wireshark-3.2.1/epan/proto.c
@@ -6067,6 +6067,9 @@ new_field_info(proto_tree *tree, header_field_info *hfinfo, tvbuff_t *tvb,
 	fi->length     = item_length;
 	fi->tree_type  = -1;
 	fi->flags      = 0;
+    fi->value_min  = 0;
+    fi->value_max  = 0;
+    fi->source_tree= tree; // Make available the tree reference in the field structure
 	if (!PTREE_DATA(tree)->visible)
 		FI_SET_FLAG(fi, FI_HIDDEN);
 	fvalue_init(&fi->value, fi->hfinfo->type);
diff --git a/wireshark-3.2.1/epan/proto.h b/wireshark-3.2.1/epan/proto.h
index cff21ac..30186bb 100644
--- a/wireshark-3.2.1/epan/proto.h
+++ b/wireshark-3.2.1/epan/proto.h
@@ -743,6 +743,7 @@ typedef struct hf_register_info {
     header_field_info  hfinfo; /**< the field info to be registered */
 } hf_register_info;
 
+typedef struct _proto_node proto_node;
 /** string representation, if one of the proto_tree_add_..._format() functions used */
 typedef struct _item_label_t {
     char representation[ITEM_LABEL_LENGTH];
@@ -760,6 +761,9 @@ typedef struct field_info {
     item_label_t        *rep;             /**< string for GUI tree */
     tvbuff_t            *ds_tvb;          /**< data source tvbuff */
     fvalue_t             value;
+    proto_node          *source_tree;     /**< add tree which this field belong (why this was not added before?) */
+    guint64 value_min;
+    guint64 value_max;
 } field_info;
 
 
diff --git a/wireshark-3.2.1/wiretap/CMakeLists.txt b/wireshark-3.2.1/wiretap/CMakeLists.txt
index 7af68f9..390e8da 100644
--- a/wireshark-3.2.1/wiretap/CMakeLists.txt
+++ b/wireshark-3.2.1/wiretap/CMakeLists.txt
@@ -141,6 +141,9 @@ target_include_directories(wiretap SYSTEM
 		${ZLIB_INCLUDE_DIRS}
 )
 
+export(TARGETS wiretap NAMESPACE wireshark::
+FILE ${PROJECT_BINARY_DIR}/wiretap-targets.cmake)
+
 install(TARGETS wiretap
 	EXPORT WiresharkTargets
 	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
diff --git a/wireshark-3.2.1/wsutil/CMakeLists.txt b/wireshark-3.2.1/wsutil/CMakeLists.txt
index 18c270c..c4f9190 100644
--- a/wireshark-3.2.1/wsutil/CMakeLists.txt
+++ b/wireshark-3.2.1/wsutil/CMakeLists.txt
@@ -274,6 +274,9 @@ target_include_directories(wsutil SYSTEM
 		${GNUTLS_INCLUDE_DIRS}
 )
 
+export(TARGETS wsutil NAMESPACE wireshark::
+FILE ${PROJECT_BINARY_DIR}/wsutil-targets.cmake)
+
 install(TARGETS wsutil
 	EXPORT WiresharkTargets
 	RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
